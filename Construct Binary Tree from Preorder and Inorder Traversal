# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        # dic={}
        # n=len(inorder)
        # for i in range(len(inorder)):
        #     dic[inorder[i]]=i
        # preorder.reverse()
        
        if(len(preorder)==0):
            return None
        
        root=TreeNode(preorder[0])
        
        pre=1
        ino=0
        stack=[]
        stack.append(root)
        
        while(pre<len(preorder)):
            curr=TreeNode(preorder[pre])
            pre+=1
            prev=None
            
            while(stack and stack[-1].val==inorder[ino]):
                prev=stack.pop()
                ino+=1
            
            if prev:
                prev.right=curr
            else:
                stack[-1].left=curr
            
            stack.append(curr)
        
        return root
    
#         def BinaryTree(pre_start,in_start,in_end,preorder,inorder):
#             if pre_start>len(preorder)-1 or in_start>in_end:
#                 return None
            
#             root = TreeNode(preorder[pre_start])
            
#             in_idx = inorder.index(root.val)
            
#             root.left = BinaryTree(pre_start+1,in_start,in_idx-1,preorder,inorder)
#             root.right = BinaryTree(pre_start+in_idx-in_start+1,in_idx+1,in_end,preorder,inorder)
            
#             return root
        
#         return BinaryTree(0,0,len(inorder)-1,preorder,inorder)
    
        
        
